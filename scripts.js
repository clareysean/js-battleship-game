/*----- constants -----*/
const boardHeight = 10;
const boardWidth = 10;

/*----- state variables -----*/

//board state represent hits +1 and misses -1
let boardState;

let playerTakenSquares = []; //store the coordinates of where the ship divs have been dropped

let computerTakenSquares = []; // store the coordinates of where computerSetup places boats (simply spans across the )

/*----- cached elements  -----*/
const playerBoard = document.getElementById("player-board");
const computerBoard = document.getElementById("computer-board");
const ships = [...document.getElementsByClassName("ship")];
const shipLengths = ships.map((ship) => ship.dataset.length);
/*----- event listeners -----*/
console.log(playerBoard);
console.log(computerBoard);
console.log(ships);
console.log(shipLengths);

/*----- functions -----*/
buildBoards();
function startGame() {
  boardState = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ];
  buildBoards();
}

function buildBoards() {
  //for player

  for (let i = 0; i < 10; i++) {
    for (let j = 0; j < 10; j++) {
      let cellDiv = document.createElement("div");
      cellDiv.id = `p-c${j}-r${i}`;
      playerBoard.appendChild(cellDiv);
    }
  }

  // for computer
  for (let i = 0; i < 10; i++) {
    for (let j = 0; j < 10; j++) {
      let cellDiv = document.createElement("div");
      cellDiv.id = `c-c${j}-r${i}`;
      computerBoard.appendChild(cellDiv);
    }
  }
}

// cache the grid cells!
const playerBoardSquares = [...playerBoard.querySelectorAll("div")];
const computerBoardSquares = [...computerBoard.querySelectorAll("div")];

console.log(playerBoardSquares);
console.log(computerBoardSquares);

setupComputerShips(shipLengths);

function setupComputerShips(shipLengthsArr) {
  //for all ships
  for (let i = 0; i <= shipLengthsArr.length; i++) {
    let randomIdx = Math.floor(Math.random() * 100);
    if (Math.random() < 0.5) {
      for (let j = 0; j <= shipLengthsArr[i]; j++) {
        computerTakenSquares.push(randomIdx + j);
      }
    } else {
      for (let j = 0; j <= shipLengthsArr[i]; j++) {
        computerTakenSquares.push(randomIdx);
        randomIdx += 10;
        //add guard here so that ships can't be added after 10 - length
      }
    }
  }
  console.log(computerTakenSquares);

  // todo: create alg for vertical assignment of taken squares
  // for horizontal ships, valid starting points are
  // random between (0 and 10 - ship.dataset.length)
  //
  //
  // for loop for rows adding ten to the valid starts each time
  //starting at random indexes  (generate randon num), update computerTakenSquares with (indexes of taken squares)
  // ships.forEach((ship) => console.log(ship.dataset.length));
}

//use state to update UI

function renderBoard() {
  boardState.forEach((colArr, colIdx) => {
    // Iterate over the cells in the cur column (colArr)
    colArr.forEach((cellVal, rowIdx) => {
      const cellId = `c${colIdx}r${rowIdx}`;
      const cellEl = document.getElementById(cellId);
      //add style for dot indicating hit or miss
    });
  });
}

// todo
// fix build Boards to actually set up grid

//     Battleship:

//     - Two ten by ten grids

//     - one represents hidden computer board, other is player board

//     - create with two containers with 10x10 css grids

//     - append squares to containers at each grid position using for loops to assign their position based on index. Outer of loop takes row, inner takes column;

//    Pieces:

//      - Carrier (5)

//      - Battleship (4)

//      - Cruiser (3)

//      - Submarine (3)

//      - Destroyer (2)

//      Class Ship = {
//       constructor(name, length) {
//         this.name = name;
//         This.length = length;
//    }

//    State:

//     - Hits (number) on boardState

//     - misses (number) on boardState

//     - takenSquares (update when ship dropped)

//     - Sunk Ships (a list on screen generated by an array)

//     - possible to hold hit, miss, or neutral state in an array called boardState.

//     - update board at end of each turn using boardState array to update styles of divs corresponding in index.

//     - structure of boardState and boardSquares (DOM cached DOM squares(divs)) must match in structure. Array of arrays

//    Build board:

//     - 10x for loop, assign col id
//     - 10x inner loop assign row id

//     - figure out where event listeners go to detect and check valid drop on rows and columns

//    - event is on the div itself, which has an index within the boardSquares cached array. I need to understand the structure of the event.target object and how to check available cols based on the indexOf the event.target in boardSquares

//    Setup:

//     - Drag and drop pieces onto game board

//     - Piece can be horizontal or vertical based on isHorizontal

//     - Must be dropped onto empty squares (check e.target squares against taken squares)

//     - Must not go over board boundary (check using board square id?.

//        handleDrop()

//       If isHorizontal

//         - startIdx = boardSquares.indexOf(e.target)
//         - if startIdx + ship.length > 10, invalid drop

//       If !isHorizontal

//         - check if ship.length + column index > 10

//               - this means that each square will be programatically assigned a rowID colID as a co

//     - Once Total taken squares > 17 (34 if adding computer taken squares to array), game starts

//    Player Play:

//     - Player goes first

//     - Click on a square on computer grid

//     - If hit fire hit function and display `it's a hit!` -> update Dom with red coloured divs(square) for hit square -> check sink -> - otherwise miss, white square

//     - check win

//    Computer Play:

//     - Use either random num or alg to pick a square on player board

//     - use set timeout to simulate thinking

//     - update dom to show hits or misses -> check sink -

//     - check win

//    issues:

//    - How to store values of Ships (start in a div at side of screen, dragged onto board.)
//         - ships are groups of divs that span a section on the grid that matches their own dimensions
//         - ship Divs will have hard coded id corresponding to their name

//    - how to check hit:
//         - Use taken squares? (Data associated with ship will be color of div based on hit status, position on board
