/*----- constants -----*/
const boardHeight = 10;
const boardWidth = 10;
/*----- state variables -----*/
let boardState;
/*----- cached elements  -----*/
const playerBoard = [...document.querySelectorAll(".p-row")];
const computerBoard = [...document.querySelectorAll(".c-row")];
/*----- event listeners -----*/
console.log(playerBoard);
console.log(computerBoard);
/*----- functions -----*/
buildBoards();
function startGame() {
  boardState = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ];
  buildBoards();
  buildShips();
}

function buildBoards() {
  //build cols
  //
  playerBoard.forEach((cell, i) => {
    let square = document.createElement("div");
    square.innerText = i;
    square.style.backgroundColor = "white";
    cell.appendChild(square);
  });
}

// todo
// fix build Boards to actually set up grid

//     Battleship:

//     - Two ten by ten grids

//     - one represents hidden computer board, other is player board

//     - create with two containers with 10x10 css grids

//     - append squares to containers at each grid position using for loops to assign their position based on index. Outer of loop takes row, inner takes column;

//    Pieces:

//      - Carrier (5)

//      - Battleship (4)

//      - Cruiser (3)

//      - Submarine (3)

//      - Destroyer (2)

//      Class Ship = {
//       constructor(name, length) {
//         this.name = name;
//         This.length = length;
//    }

//    State:

//     - Hits (number) on boardState

//     - misses (number) on boardState

//     - takenSquares (update when ship dropped)

//     - Sunk Ships (a list on screen generated by an array)

//     - possible to hold hit, miss, or neutral state in an array called boardState.

//     - update board at end of each turn using boardState array to update styles of divs corresponding in index.

//     - structure of boardState and boardSquares (DOM cached DOM squares(divs)) must match in structure. Array of arrays

//    Build board:

//     - 10x for loop, assign col id
//     - 10x inner loop assign row id

//     - figure out where event listeners go to detect and check valid drop on rows and columns

//    - event is on the div itself, which has an index within the boardSquares cached array. I need to understand the structure of the event.target object and how to check available cols based on the indexOf the event.target in boardSquares

//    Setup:

//     - Drag and drop pieces onto game board

//     - Piece can be horizontal or vertical based on isHorizontal

//     - Must be dropped onto empty squares (check e.target squares against taken squares)

//     - Must not go over board boundary (check using board square id?.

//        handleDrop()

//       If isHorizontal

//         - startIdx = boardSquares.indexOf(e.target)
//         - if startIdx + ship.length > 10, invalid drop

//       If !isHorizontal

//         - check if ship.length + column index > 10

//               - this means that each square will be programatically assigned a rowID colID as a co

//     - Once Total taken squares > 17 (34 if adding computer taken squares to array), game starts

//    Player Play:

//     - Player goes first

//     - Click on a square on computer grid

//     - If hit fire hit function and display `it's a hit!` -> update Dom with red coloured divs(square) for hit square -> check sink -> - otherwise miss, white square

//     - check win

//    Computer Play:

//     - Use either random num or alg to pick a square on player board

//     - use set timeout to simulate thinking

//     - update dom to show hits or misses -> check sink -

//     - check win

//    issues:

//    - How to store values of Ships (start in a div at side of screen, dragged onto board.)
//         - ships are groups of divs that span a section on the grid that matches their own dimensions
//         - ship Divs will have hard coded id corresponding to their name

//    - how to check hit:
//         - Use taken squares? (Data associated with ship will be color of div based on hit status, position on board
